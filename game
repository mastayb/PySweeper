#!/usr/bin/env python

########################################
# 
# Basic terminal minesweeper game 
# written by Ben Mastay
# 
########################################
import models.board
import models.cursor
import curses

def draw(stdscr, board, cursor):
    stdscr.clear()
    curses.curs_set(0)

    c_y,c_x =   cursor.get_pos() 

    for y,r in enumerate(board.board):
        for x,tile in enumerate(r):
            if (x,y) == (c_x,c_y):
                stdscr.addstr(y*2,1+x*2, str(tile), curses.A_STANDOUT)
            else:
                stdscr.addstr(y*2,1+x*2, str(tile))
    
    stdscr.refresh()


def notification(stdscr, text="", height = 11, width = 20, begin_yx = None):
    
    if not begin_yx:
        max_y, max_x = stdscr.getmaxyx()
        begin_y = max_y//2-height//2
        begin_x = max_x//2-width//2
    else:
        begin_y, begin_x = begin_yx

    window = stdscr.derwin(height, width, begin_y, begin_x)
    window.clear()
    window.addstr(height//2, width//2-len(text)//2, str(text))

    window.border()
    window.refresh()




def get_integer_input(min_limit, max_limit, input_name):
    while True:
        try:
            value  = int(input("Please enter " + input_name + ": "))

            if value < min_limit or value > max_limit:
                raise ValueError

            break

        except ValueError:
            print("Not a valid " + input_name)
    return value



def get_game_params(max_w, max_h):
    width = get_integer_input(1, max_w, "game width")
    height = get_integer_input(1, max_h, "game height")
    mines = get_integer_input(1, width*height-1, "number of mines")
    return width,height,mines

        


def main(stdscr, game_pararms):
    stdscr.clear()

    board = models.board.Board(width,height,mines)
    cursor = models.cursor.Cursor(width-1,height-1)
    draw(stdscr,board,cursor)


    game_won = False

    while(True):
        c = stdscr.getch()
        if c == curses.KEY_DOWN:
            cursor.move_down()
        elif c == curses.KEY_UP:
            cursor.move_up()
        elif c == curses.KEY_RIGHT:
            cursor.move_right()
        elif c == curses.KEY_LEFT:
            cursor.move_left()
        elif c == ord('q'):
            break
        elif c == ord(' '):
            c_y,c_x = cursor.get_pos() 
            board.reveal_tile(c_y, c_x)
            if board.at((c_y,c_x)).is_bomb():
                board.reveal_all()
                break
            if not board.hidden_tiles:
                game_won = True
                break

        elif c == ord('x'):
            c_y,c_x =   cursor.get_pos() 
            board.toggle_tile_mark(c_y, c_x)
        else:
            continue
            
        draw(stdscr,board,cursor)

    draw(stdscr,board,cursor)
    stdscr.getkey()

    if game_won:
        notification(stdscr, "YOU WON")
    else:
        notification(stdscr, "YOU LOST")
    stdscr.getkey()


if __name__ == "__main__":
    max_x,max_y = 50,50
    width, height, mines = get_game_params(max_x, max_y)
    curses.wrapper(lambda stdscr: main(stdscr,(width, height, mines)))


